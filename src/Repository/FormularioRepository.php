<?php

namespace App\Repository;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use App\Entity\Formulario;

/**
 * FormularioRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormularioRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Formulario::class);
    }

    public function findFormularioByUsuarioFormularioFecha($usuarioFormularioId, $ultimaFechaActualizacion, $userId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder('a');

        $qb->select('a', 'r', 'uf', 'f')
            ->from('SistemaFormularioBundle:FormularioResultado', 'a')
            ->leftJoin('a.resultados', 'r')
            ->join('a.usuarioFormulario', 'uf')
            ->join('uf.formulario', 'f')
            ->join('uf.user', 'u')
            ->where('u.id = :user')
            ->setParameter('user', $idUser)
        ;

        return $qb->getQuery()->getResult();
    }

    public function findByExpress()
    {
        $qb = $this->getEntityManager()->createQueryBuilder('a');

        $qb->select('a')
            ->from(Formulario::class, 'a')
            ->where('a.express = :express')
            ->setParameter('express', true)
        ;

        return $qb->getQuery()->getResult();
    }

    public function findByCM()
    {
        $qb = $this->getEntityManager()->createQueryBuilder('a');

        $qb->select('a')
            ->from(Formulario::class, 'a')
            ->where('a.compraMateriales = :compraMateriales')
            ->setParameter('compraMateriales', true)
        ;

        return $qb->getQuery()->getResult();
    }
    public function FormularioList()
    {
        return $this->createQueryBuilder('o')
            ->addOrderBy('o.id', 'DESC')
            ->getQuery()
            ->getResult()
        ;
    }
    public function FindById($id)
    {
        return $this->createQueryBuilder('u')
            ->where('u.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }
}
